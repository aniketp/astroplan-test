 Priority - Scheduler 

Schedule containing 6 observing blocks between 2016-07-06 19:00:00.000 and 2016-07-07 19:00:00.000
     target         start time (UTC)         end time (UTC)     duration (minutes)        ra            dec         configuration  
--------------- ----------------------- ----------------------- ------------------ --------------- -------------- -----------------
            M13 2016-07-07 03:49:20.019 2016-07-07 04:21:20.019               32.0 250d25m24.4499s 36d27m40.7002s   {'filter': 'R'}
TransitionBlock 2016-07-07 04:21:20.019 2016-07-07 04:22:00.019     0.666666666667                                ['filter:R to B']
            M13 2016-07-07 04:25:20.021 2016-07-07 04:57:20.021               32.0 250d25m24.4499s 36d27m40.7002s   {'filter': 'B'}
TransitionBlock 2016-07-07 04:57:20.021 2016-07-07 04:57:40.021     0.333333333333                                ['filter:B to G']
            M13 2016-07-07 04:57:40.021 2016-07-07 05:29:40.021               32.0 250d25m24.4499s 36d27m40.7002s   {'filter': 'G'}
TransitionBlock 2016-07-07 05:29:40.021 2016-07-07 05:31:00.021      1.33333333333                                ['filter:G to R']
          Deneb 2016-07-07 06:44:00.026 2016-07-07 07:05:20.026      21.3333333333 310d21m28.7271s 45d16m49.2197s   {'filter': 'R'}
TransitionBlock 2016-07-07 07:05:20.026 2016-07-07 07:06:00.026     0.666666666667                                ['filter:R to G']
          Deneb 2016-07-07 07:09:20.027 2016-07-07 07:30:40.027      21.3333333333 310d21m28.7271s 45d16m49.2197s   {'filter': 'G'}
TransitionBlock 2016-07-07 07:30:40.027 2016-07-07 07:31:20.027     0.666666666667                                ['filter:G to B']
          Deneb 2016-07-07 07:34:40.028 2016-07-07 07:56:00.028      21.3333333333 310d21m28.7271s 45d16m49.2197s   {'filter': 'B'}
Wrote profile results to prio_test.py.lprof
Timer unit: 1e-06 s

Total time: 6.82537 s
File: prio_test.py
Function: _make_schedule at line 80

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    80                                               @profile
    81                                               def _make_schedule(self, blocks):
    82                                           
    83         1           10     10.0      0.0          _all_times = []
    84         1           20     20.0      0.0          _block_priorities = np.zeros(len(blocks))
    85         7           35      5.0      0.0          for i, b in enumerate(blocks):
    86         6           29      4.8      0.0              if b.constraints is None:
    87                                                           b._all_constraints = self.constraints
    88                                                       else:
    89         6           34      5.7      0.0                  b._all_constraints = self.constraints + b.constraints
    90         6           27      4.5      0.0              if b._all_constraints is None:
    91                                                           b._all_constraints = [AltitudeConstraint(min=0 * u.deg)]
    92                                                           b.constraints = [AltitudeConstraint(min=0 * u.deg)]
    93         6           69     11.5      0.0              elif not any(isinstance(c, AltitudeConstraint) for c in b._all_constraints):
    94                                                           b._all_constraints.append(AltitudeConstraint(min=0 * u.deg))
    95                                                           if b.constraints is None:
    96                                                               b.constraints = [AltitudeConstraint(min=0 * u.deg)]
    97                                                           else:
    98                                                               b.constraints.append(AltitudeConstraint(min=0 * u.deg))
    99         6         3232    538.7      0.0              b._duration_offsets = u.Quantity([0 * u.second, b.duration / 2, b.duration])
   100         6           42      7.0      0.0              _block_priorities[i] = b.priority
   101         6           30      5.0      0.0              _all_times.append(b.duration)
   102         6           29      4.8      0.0              b.observer = self.observer
   103                                           
   104                                                  
   105                                           
   106         1            4      4.0      0.0          time_resolution = self.time_resolution
   107         1            6      6.0      0.0          times = time_grid_from_range([self.schedule.start_time, self.schedule.end_time],
   108         1         1097   1097.0      0.0                                       time_resolution=time_resolution)
   109         1           44     44.0      0.0          is_open_time = np.ones(len(times), bool)
   110                                                   # close times that are already filled
   111         1            5      5.0      0.0          pre_filled = np.array([[block.start_time, block.end_time] for
   112         1           19     19.0      0.0                                 block in self.schedule.scheduled_blocks])
   113         1           12     12.0      0.0          for start_end in pre_filled:
   114                                                       filled = np.where((start_end[0] < times) & (times < start_end[1]))
   115                                                       is_open_time[filled[0]] = False
   116                                                       is_open_time[min(filled[0]) - 1] = False
   117                                                   # generate the score arrays for all of the blocks
   118         1           15     15.0      0.0          scorer = Scorer(blocks, self.observer, self.schedule, global_constraints=self.constraints)
   119         1      5881218 5881218.0     86.2          score_array = scorer.create_score_array(time_resolution)
   120                                           
   121                                                   # Sort the list of blocks by priority
   122         1           17     17.0      0.0          sorted_indices = np.argsort(_block_priorities)
   123                                           
   124         1            2      2.0      0.0          unscheduled_blocks = []
   125                                                   # Compute the optimal observation time in priority order
   126         7           24      3.4      0.0          for i in sorted_indices:
   127         6           14      2.3      0.0              b = blocks[i]
   128                                                       # Compute possible observing times by combining object constraints
   129                                                       # with the master open times mask
   130         6           17      2.8      0.0              constraint_scores = score_array[i]
   131                                           
   132                                                       # Add up the applied constraints to prioritize the best blocks
   133                                                       # And then remove any times that are already scheduled
   134         6          103     17.2      0.0              constraint_scores[is_open_time == False] = 0
   135                                                       # Select the most optimal time
   136                                           
   137                                                       # need to leave time around the Block for transitions
   138         6           18      3.0      0.0              if self.transitioner.instrument_reconfig_times:
   139         6           13      2.2      0.0                  max_config_time = sum([max(value.values()) for value in
   140         6         1857    309.5      0.0                                         self.transitioner.instrument_reconfig_times.values()])
   141                                                       else:
   142                                                           max_config_time = 0*u.second
   143         6           25      4.2      0.0              if self.transitioner.slew_rate:
   144         6         1928    321.3      0.0                  buffer_time = (160*u.deg/self.transitioner.slew_rate + max_config_time)
   145                                                       else:
   146                                                           buffer_time = max_config_time
   147                                                       # TODO: make it so that this isn't required to prevent errors in slot creation
   148         6          408     68.0      0.0              total_duration = b.duration + buffer_time
   149                                                       # calculate the number of time slots needed for this exposure
   150         6         1070    178.3      0.0              _stride_by = np.int(np.ceil(float(total_duration / time_resolution)))
   151                                           
   152                                                       # Stride the score arrays by that number
   153         6          260     43.3      0.0              _strided_scores = stride_array(constraint_scores, _stride_by)
   154                                           
   155                                                      
   156         6         3061    510.2      0.0              good = np.all(_strided_scores > 1e-5, axis=1)
   157         6           67     11.2      0.0              sum_scores = np.zeros(len(_strided_scores))
   158         6          655    109.2      0.0              sum_scores[good] = np.sum(_strided_scores[good], axis=1)
   159                                           
   160         6          202     33.7      0.0              if np.all(constraint_scores == 0) or np.all(good == False):
   161                                                           # No further calculation if no times meet the constraints
   162                                                           _is_scheduled = False
   163                                           
   164                                                       else:
   165                                                           # If an optimal block is available, _is_scheduled=True
   166         6           77     12.8      0.0                  best_time_idx = np.argmax(sum_scores)
   167         6           12      2.0      0.0                  start_time_idx = best_time_idx
   168         6          597     99.5      0.0                  new_start_time = times[best_time_idx]
   169         6           13      2.2      0.0                  _is_scheduled = True
   170                                           
   171         6           11      1.8      0.0              if _is_scheduled:
   172                                                           # set duration such that the Block will fit in the strided array
   173         6         1217    202.8      0.0                  duration_indices = np.int(np.ceil(float(b.duration / time_resolution)))
   174         6          427     71.2      0.0                  b.duration = duration_indices * time_resolution
   175                                                           # add 1 second to the start time to allow for scheduling at the start of a slot
   176         6        35344   5890.7      0.5                  slot_index = [q for q, slot in enumerate(self.schedule.slots)
   177         6           19      3.2      0.0                                if slot.start < new_start_time + 1*u.second < slot.end][0]
   178         6           18      3.0      0.0                  slots_before = self.schedule.slots[:slot_index]
   179         6           13      2.2      0.0                  slots_after = self.schedule.slots[slot_index + 1:]
   180                                                           # this has to remake transitions between already existing ObservingBlocks
   181         6            9      1.5      0.0                  if slots_before:
   182         3           14      4.7      0.0                      if isinstance(self.schedule.slots[slot_index - 1].block, ObservingBlock):
   183                                                                   # make a transition object after the previous ObservingBlock
   184                                                                   tb = self.transitioner(self.schedule.slots[slot_index - 1].block, b,
   185                                                                                          self.schedule.slots[slot_index - 1].end, self.observer)
   186                                                                   times_indices = np.int(np.ceil(float(tb.duration / time_resolution)))
   187                                                                   tb.duration = times_indices * time_resolution
   188                                                                   start_idx = self.schedule.slots[slot_index - 1].block.end_idx
   189                                                                   end_idx = times_indices + start_idx
   190                                                                   # this may make some OBs get sub-optimal scheduling, but it closes gaps
   191                                                                   # TODO: determine a reasonable range inside which it gets shifted
   192                                                                   if (new_start_time - tb.start_time < tb.duration or
   193                                                                           abs(new_start_time - tb.end_time) < self.gap_time):
   194                                                                       new_start_time = tb.end_time
   195                                                                       start_time_idx = end_idx
   196                                                                   self.schedule.insert_slot(tb.start_time, tb)
   197                                                                   is_open_time[start_idx: end_idx] = False
   198                                                                   slot_index += 1
   199                                                                   # Remove times from the master time list (copied in later code blocks)
   200         3            7      2.3      0.0                      elif isinstance(self.schedule.slots[slot_index - 1].block, TransitionBlock):
   201                                                                   # change the existing TransitionBlock to what it needs to be now
   202         3            8      2.7      0.0                          tb = self.transitioner(self.schedule.slots[slot_index - 2].block, b,
   203         3       210258  70086.0      3.1                                                 self.schedule.slots[slot_index - 2].end, self.observer)
   204         3          548    182.7      0.0                          times_indices = np.int(np.ceil(float(tb.duration / time_resolution)))
   205         3          220     73.3      0.0                          tb.duration = times_indices * time_resolution
   206         3           14      4.7      0.0                          start_idx = self.schedule.slots[slot_index - 2].block.end_idx
   207         3           10      3.3      0.0                          end_idx = times_indices + start_idx
   208         3         2279    759.7      0.0                          self.schedule.change_slot_block(slot_index - 1, new_block=tb)
   209         3         2530    843.3      0.0                          if (new_start_time - tb.start_time < tb.duration or
   210         3         4756   1585.3      0.1                                  abs(new_start_time - tb.end_time) < self.gap_time):
   211         1          718    718.0      0.0                              new_start_time = tb.end_time
   212         1            2      2.0      0.0                              start_time_idx = end_idx
   213         3           18      6.0      0.0                          is_open_time[start_idx: end_idx] = False
   214         6           21      3.5      0.0                  end_time_idx = duration_indices + start_time_idx
   215                                           
   216         6           11      1.8      0.0                  if slots_after:
   217         5           16      3.2      0.0                      if isinstance(self.schedule.slots[slot_index + 1].block, ObservingBlock):
   218                                                                   # make a transition object after the new ObservingBlock
   219         5           13      2.6      0.0                          tb = self.transitioner(b, self.schedule.slots[slot_index + 1].block,
   220         5       519836 103967.2      7.6                                                 new_start_time + b.duration, self.observer)
   221         5          931    186.2      0.0                          times_indices = np.int(np.ceil(float(tb.duration / time_resolution)))
   222         5          342     68.4      0.0                          tb.duration = times_indices * time_resolution
   223         5        66522  13304.4      1.0                          self.schedule.insert_slot(tb.start_time, tb)
   224         5           16      3.2      0.0                          start_idx = end_time_idx
   225         5           20      4.0      0.0                          end_idx = start_idx + times_indices
   226         5           42      8.4      0.0                          is_open_time[start_idx: end_idx] = False
   227                                           
   228                                                           # now assign the block itself times and add it to the schedule
   229         6           21      3.5      0.0                  b.constraints = b._all_constraints
   230         6           12      2.0      0.0                  b.end_idx = end_time_idx
   231         6        82677  13779.5      1.2                  self.schedule.insert_slot(new_start_time, b)
   232         6           35      5.8      0.0                  is_open_time[start_time_idx: end_time_idx] = False
   233                                           
   234                                                       else:
   235                                                           print("could not schedule", b.target.name)
   236                                                           unscheduled_blocks.append(b)
   237                                                           continue
   238                                           
   239         1            3      3.0      0.0          return self.schedule

